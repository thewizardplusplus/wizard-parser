![](/files/images/figure1.svg)

Wizard Basic 3 &mdash; интерпретируемый высокоуровневый язык программирования.
Поддерживает структурную парадигму, обладает строгой динамической типизацией и
менеджером памяти, основанным на подсчёте ссылок.

<cut />

### Исходники

Файлы исходного кода должны быть в кодировке ASCII.

### Ключевые слова

17 ключевых слов:

    and break continue do else end function if include let new not or return structure then while

### Типы

Типизация: строгая динамическая.

Менеджмент памяти: подсчёт ссылок без сборщика мусора, слабых ссылок нет.

#### Числа

Название: number.

Тип: с плавающей запятой, 8 байт.

Копирование: по значению.

Хранение: на стеке.

Определение: `/\d+(\.\d+)?/`.

#### Массивы

Название: array.

Тип: динамический массив.

Копирование: по ссылке.

Хранение:

* ссылки - на стеке;
* значения - в куче.

Определение: `"[", [expression, {",", expression}], "]"`.

Доступ к элементам: `expression, "[", expression, "]"`.

#### Строки

Строками являются массивы, хранящие коды символов. Используется кодировка ASCII.

Определение: `/"(\\.|[^"])*"/`.

#### Структуры

Название: задаётся программистом.

Копирование: по ссылке.

Хранение:

* ссылки - на стеке;
* значения - в куче.

Объявление:

    "structure", identifier,
        identifier, ";",
        {identifier, ";"},
    "end"

Может располагаться только в глобальной области видимости.

Определение: `"new", identifier`.

Доступ к полям: `expression, ".", identifier`.

#### Логические значения

В качестве ложного логического значения принимается число 0.

В качестве истинного логического значения принимаются числа, отличные от 0, и
любые ссылки на массивы и структуры.

### Операции

Перечислены в порядке убывания приоритета.

Приоритет | Операция | Описание | Ассоциативность | Типы | Особенности
--- | --- | --- | --- | --- | ---
1 | `[]` | доступ к элементам массива | левая | массивы | &mdash;
1 | `.` | доступ к полям структур | левая | структуры | &mdash;
2 | `new` | определение структур | правая | идентификаторы структур | &mdash;
2 | `-` | унарный минус | правая | числа | &mdash;
2 | `not` | логическое отрицание | правая | все | &mdash;
3 | `*` | умножение | левая | числа | &mdash;
3 | `/` | деление | левая | числа | &mdash;
4 | `+` | сложение | левая | числа | &mdash;
4 | `-` | вычитание | левая | числа | &mdash;
5 | `<` | меньше | левая | числа | &mdash;
5 | `<=` | меньше или равно | левая | числа | &mdash;
5 | `>` | больше | левая | числа | &mdash;
5 | `>=` | больше или равно | левая | числа | &mdash;
6 | `==` | равенство | левая | все | при сравнении массивов и структур сравнивает ссылки
6 | `/=` | неравенство | левая | все | при сравнении массивов и структур сравнивает ссылки
7 | `and` | логическое и | левая | все | ленивая
8 | `or` | логическое или | левая | все | ленивая

### Переменные

Объявление и определение: `"let", identifier, "=", expression, ";"`.

### Присваивание

    expression, "=", expression, ";"

В качестве левого `expression` могут использоваться переменные, элементы
массивов и поля структур.

### Управляющие конструкции

#### Условие

    "if", expression, "then",
        statement,
        {statement},
    {"else", "if", expression, "then",
        statement,
        {statement}},
    ["else",
        statement,
        {statement}],
    "end"

#### Цикл

    "while", expression, "do",
        statement,
        {statement},
    "end"

Переход к следующей итерации цикла: `continue, ";"`.

Прерывание цикла: `break, ";"`.

### Функции

Объявление:

    "function", identifier, "(", [identifier, {",", identifier}], ")",
        statement,
        {statement},
    "end"

Может располагаться только в глобальной области видимости.

Подерживается перегрузка функций (только по количеству аргументов).

Возврат из функции: `"return", [expression], ";"`.

Вызов функции: `identifier, "(", [expression, {",", expression}], ")"`.

### Точка входа

    function Main(arguments)

В `arguments` передаются аргументы командной строки. `arguments[0]` &mdash;
полный путь к файлу с кодом.

### Модульность

Тип: включением кода как текста.

Использование: `"include", expression, ";"`.

В качестве `expression` может использоваться лишь определение строки. Строка
должна содержать относительный путь к файлу с кодом.

Файлы включаются рекурсивно, и каждый только один раз.

### Полное описание грамматики

    program =
        variable definition
        | structure declaration
        | function declaration;

    variable definition = "let", identifier, "=", expression, ";";
    structure declaration =
        "structure", identifier,
            identifier, ";",
            {identifier, ";"},
        "end";
    function declaration =
        "function", identifier, "(", [identifier, {",", identifier}], ")",
            statement list,
        "end";

    statement list = statement, {statement};
    statement =
        variable definition
        | assignment
        | condition
        | loop
        | loop continue
        | loop break
        | function return
        | (expression, ";");

    assignment = expression, "=", expression, ";";
    condition =
        "if", expression, "then",
            statement list,
        {"else", "if", expression, "then",
            statement list},
        ["else",
            statement list],
        "end";
    loop =
        "while", expression, "do",
            statement list,
        "end";
    loop continue = continue, ";";
    loop break = break, ";";
    function return = "return", [expression], ";";

    expression = disjunction;
    disjunction = conjunction, {"or", conjunction};
    conjunction = equality, {"and", equality};
    equality = comparison, {("==" | "/="), comparison};
    comparison = sum, {("<" | "<=" | ">" | ">="), sum};
    sum = product, {("+" | "-"), product};
    product = unary, {("*" | "/"), unary};
    unary = {"new" | "-" | "not"}, accessor;

    accessor =
        atom,
        {array item access | structure field access | function call};
    array item access = "[", expression, "]";
    structure field access = ".", identifier;
    function call = "(", [expression, {",", expression}], ")";

    atom =
        number
        | identifier
        | array definition
        | string definition
        | ("(", expression, ")");
    array definition = "[", [expression, {",", expression}], "]";

    number = ? /\d+(\.\d+)?/ ?;
    identifier = ? /[a-z_]\w*/i ? - key words;
    string definition = ? /"(\\.|[^"])*"/ ?;

    key words =
        "and"
        | "break"
        | "continue"
        | "do"
        | "else"
        | "end"
        | "function"
        | "if"
        | "include"
        | "let"
        | "new"
        | "not"
        | "or"
        | "return"
        | "structure"
        | "then"
        | "while";

### Рантайм

* модуль `lang`:
    * `GetType(value)`;
    * `Copy(value)`;
    * `DeepCopy(value)`;
    * `ToXml(value)`;
    * модуль `lang.array`:
        * `GetLength(array)`;
        * `Add(array, element)`;
        * `Remove(array, index)`;
* модуль `system`:
    * `Exit(exit_code)`;
    * модуль `system.io`:
        * `Read(stream)`;
        * `Write(stream, byte)`;
        * `Open(path, mode)`;
        * `Close(stream)`;
* модуль `maths`:
    * `Sin(number)`;
    * `Cos(number)`;
    * `Tg(number)`;
    * `Arcsin(number)`;
    * `Arccos(number)`;
    * `Arctg(number)`;
    * `SquareRoot(number)`;
    * `Power(number)`;
    * `Exp(number)`;
    * `Ln(number)`;
    * `Integral(number)`;
    * `GetRandom()`;
